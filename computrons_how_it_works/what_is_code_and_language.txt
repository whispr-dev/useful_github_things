What is Code/Language?

Difference between assembly language and high level language:

1. Assembly level language :
It is a low-level language that allows users to write a program using alphanumeric mnemonic codes, instead of numeric code for a set of instructions examples of large assembly language programs from this time are IBM PC DOS.

2. High-level language :
It is a machine-independent language. It enables a user to write a program in a language that resembles English words and familiar mathematical symbols, COBOL was the first high-level language. Examples of high-level language are python,c#, etc.

Difference between assembly language and high-level language :

ASSEMBLY LEVEL LANGUAGE 										HIGH-LEVEL LANGUAGE    

    It needs an assembler for conversion					    It needs a compiler/interpreter for conversion

    In this, we convert an Assembly level 					    In this, we convert a high-level language to
language to machine level language					 	Assembly level language to machine level language

    It is machine dependent										 It is machine-independent

    In this mnemonics, codes are used						    In this English statement is used

    It supports low-level operation						    It does not support low-level language

    In this, it is easy to access hardware component    In this, it is difficult to access hardware component

    In this more compact code									 No compactness


Addressing Modes– The term addressing modes refers to the way in which the operand of an instruction is specified. The addressing mode specifies a rule for interpreting or modifying the address field of the instruction before the operand is actually executed.
Addressing modes for 8086 instructions are divided into two categories: 1) Addressing modes for data 2) Addressing modes for branch

The 8086 memory addressing modes provide flexible access to memory, allowing you to easily access variables, arrays, records, pointers, and other complex data types.  The key to good assembly language programming is the proper use of memory addressing modes.
An assembly language program instruction consists of two parts :

opcode	operand

The memory address of an operand consists of two components:  IMPORTANT TERMS

    Starting address of memory segment.
    Effective address or Offset: An offset is determined by adding any combination of three address elements: displacement, base and index.
        Displacement: It is an 8 bit or 16 bit immediate value given in the instruction.
        Base: Contents of base register, BX or BP.
        Index: Content of index register SI or DI.

According to different ways of specifying an operand by 8086 microprocessor, different addressing modes are used by 8086. Addressing modes used by 8086 microprocessor are discussed below:

- [Implied mode:] In implied addressing the operand is specified in the instruction itself. In this mode the data is 8 bits or 16 bits long and data is the part of instruction. *zero address instruction are designed with implied addressing mode.:*

instruction
data

Example:  `CLC (used to reset Carry flag to 0)`


- [Immediate addressing mode (symbol #):] In this mode data is present in address field of instruction .Designed like one address instruction format. *note: Limitation in the immediate mode is that the range of constants are restricted by size of address field. *

opcode	Address
			[data stored
			drectly here]

Example:  `MOV AL, 35H (move the data 35H into AL register)`


- [Register mode:] In register addressing the operand is placed in one of 8 bit or 16 bit general purpose registers. The data is in the register that is specified by the instruction. *Here one register reference is required to access the data.*

instruction					register
	Register			->			Data

Example: `MOV AX,CX (move the contents of CX register to AX register)`


- [Register Indirect mode:] In this addressing, the operand’s offset is placed in any one of the registers BX,BP,SI,DI as specified in the instruction. The effective address of the data is in the base register or an index register that is specified by the instruction. *here two register reference is required to access the data.*

instruction					register							memory
	Register		->			Effective Address		->		Data

The 8086 CPUs let you access memory indirectly through a register using the register indirect addressing modes.:
`MOV AX, [BX](move the contents of memory location s addressed by the register BX to the register AX)`


- [Auto Indexed (increment mode):] Effective address of the operand is the contents of a register specified in the instruction. After accessing the operand, the contents of this register are automatically incremented to point to the next consecutive memory location.(R1)+. *here one register reference,one memory reference and one ALU operation is required to access the data.*
 Example: 		`Add R1, (R2)+  // OR
					R1 = R1 +M[R2]
					R2 = R2 + d`

 - [Auto indexed ( decrement mode):] Effective address of the operand is the contents of a register specified in the instruction. Before accessing the operand, the contents of this register are automatically decremented to point to the previous consecutive memory location. –(R1)*hHere one register reference,one memory reference and one ALU operation is required to access the data.*
Example:	`Add R1,-(R2)   //OR
			R2 = R2-d
			R1 = R1 + M[R2]`

*Auto decrement mode is same as  auto increment mode. Both can also be used to implement a stack as push and pop . Auto increment and Auto decrement modes are useful for implementing “Last-In-First-Out” data structures.*


- [Direct addressing/ Absolute addressing Mode (symbol [ ]):] The operand’s offset is given in the instruction as an 8 bit or 16 bit displacement element. In this addressing mode the 16 bit effective address of the data is the part of the instruction. Here only one memory reference operation is required to access the data.

			instruction				memory
	Effective Address		->		Data

Example: `ADD AL,[0301]   //add the contents of offset address 0301 to AL`


- [Indirect addressing Mode (symbol @ or () ):] In this mode address field of instruction contains the address of effective address.Here two references are required. 1st reference to get effective address. 2nd reference to access the data.
Based on the availability of Effective address, Indirect mode is of two kind:
1.    Register Indirect:In this mode effective address is in the register, and corresponding register name will be maintained in the address field of an instruction. *hre one register reference,one memory reference is required to access the data.*
2.    Memory Indirect:In this mode effective address is in the memory, and corresponding memory address will be maintained in the address field of an instruction. *here two memory reference is required to access the data.*

Indexed addressing mode: The operand’s offset is the sum of the content of an index register SI or DI and an 8 bit or 16 bit displacement.

Example:`MOV AX, [SI +05]` 

 Based Indexed Addressing: The operand’s offset is sum of the content of a base register BX or BP and an index register SI or DI.

Example: `ADD AX, [BX+SI]` 


Based on Transfer of control, addressing modes are:

    PC relative addressing mode: PC relative addressing mode is used to implement intra segment transfer of control, In this mode effective address is obtained by adding displacement to PC.

 `   EA= PC + Address field value
    PC= PC + Relative value.`

Base register addressing mode:Base register addressing mode is used to implement inter segment transfer of control.In this mode effective address is obtained by adding base register value to address field value.

`EA= Base register + Address field value.
PC= Base register + Relative value.`

	Note:
	1.    PC relative and based register both addressing modes are suitable for program relocation at 	runtime.
 	2. Based register addressing mode is best suitable to write position independent codes.


Advantages of Addressing Modes
1.    To give programmers to facilities such as Pointers, counters for loop controls, indexing of data and program relocation.
2.    To reduce the number bits in the addressing field of the Instruction.

GATEs:
Matching each of the high level language statements given on the left hand side with the most natural addressing mode from those listed on the right hand side:
List 1                          	 List 2							Explanation:
1. A[1] = B[J];       		b. Indexed  addressing		Here indexing is used
2. while [*A++];    	c. Autoincrement				The memory locations are automatically incremented
3. int temp = *x;	 	a. Indirect addressing		Here temp is assigned the value of int type stored	
														at the address contained in X
      

Difference between Memory based and Register based Addressing Modes

- Addressing modes are the operations field specifies the operations which need to be performed.
- The operation must be executed on some data which is already stored in computer registers* or in the memory. The way of choosing operands during program execution is dependent on addressing *modes of instruction.*
 “The addressing mode specifies a rule for interpreting or modifying the address field of the instruction before the operand is actually referenced.“
- Basically how we are interpreting the operand which is given in the instruction is known as addressing mode. 

Addressing mode very much depends on the type of CPU organization. There are three types of CPU organization: 

1.    Single Accumulator organization 
2.    General register organization 
3.    Stack organization 

Addressing modes is used for one or both of the following purposes, these can also be said as the advantages of using addressing mode: 
1.    To give programming versatility to the user by providing such facilities as pointers to memory, counter for loop control, indexing of data, and program relocation. 
2.    To reduce the number of bits in the addressing field of the instruction. 

There is a number of addressing modes available and it depends on the architecture and CPU organization which of the addressing modes can be applied. 

Differences between Memory based and Register based Addressing Modes:

Memory Based Addressing Modes					Register Based Addressing Modes

The operand is present in memory and its			An operand will be given in one of the registers 
address is given in the instruction itself.		and the register’s number will be provided in
 This addressing mode is taking proper			the instruction. With the register number 
advantage of a memory address, e.g., Direct		present in instruction, an operand is fetched, 
addressing mode	  									 e.g., Register mode 
 
The memory address specified in the				The register contains the address of the 
instruction may give the address where the 		operand. The effective address can be derived
effective address is stored in the memory.		 from the content of the register specified in the
 In this case, an effective memory address is	instruction. The content of the register might 
present in the memory address which is			 not be the effective address. This mode takes 
specified in the instruction, e.g., Indirect 	full advantage of registers, e.g., Register
Addressing Mode	    									indirect mode 
 
The content of the base register is added to	If we are having a table of data and our 
the address part of the instruction to obtain	program needs to access all the values one by
 the effective address. A base register is		one we need something which decrements the
 assumed to hold a base address and the			program counter/or any register which has a 
address field of the instruction gives			base address. Though in this case register is
 displacement relative to the base address,		basically decreased, it is register-based 
e.g., Base Register Addressing Mode.	     	 		addressing mode, e.g., In Auto decrements mode.
 
The content of the index register is added 		If we are having a table of data and our
to the address part that is given in the 			program needs to access all the values one by
instruction to obtain the effective address.	one we need something which increments the
 Index Mode is used to access an array 			 program counter/or any register which has a
whose elements are in successive memory 		base address, e.g., Autoincrement mode
locations, e.g., Indexed Addressing Mode	   

The content of the program counter is 
added to the address part of the instruction			Instructions generally used for initializing
 in order to obtain the effective address. The			registers to a constant value are register-based 
address part of the instruction, in this case,			addressing mode, and this technique is a very 
is usually a signed number that can be 					useful approach, e.g., Immediate mode.
either positive or negative, e.g., Relative 
addressing mode	    

Memory-based addressing modes are mostly relying on Memory address and content present at some memory location. Register-based addressing modes are mostly relying on registers and content present at some register whether it is data or some memory address.

